<?php
namespace LWS\WOOREWARDS\PRO\Core;

// don't call the file directly
if( !defined( 'ABSPATH' ) ) exit();

/** Reward Confiscation.
 * Unlockable previewsly attributed rewards to users.
 * That class helps to revoke that rewards.
 * Use case: levelling system points expiration. */
class Confiscator
{
	public $references = array();
	public $pool = false;
	public $users = array();
	public $usersIn = false;
	public $resetCache = false;

	/** Confiscate only from those users.
	 *	If not set, confiscate all users.
	 *	@param $userIds array of user ID */
	function &setUserFilter($userIds)
	{
		$this->users = $userIds;
		if( $this->users )
		{
			$this->usersIn = implode(',', array_map('\intval', $this->users));
			$this->usersIn = "({$this->usersIn})";
		}
		else
		{
			$this->users = array();
			$this->usersIn = false;
		}
		return $this;
	}

	/** Append all unlockable of a pool @see addRef */
	function &setByPool(\LWS\WOOREWARDS\Core\Pool $pool)
	{
		$this->pool = $pool;
		$this->addRef($pool->getUnlockables()->asArray());
		return $this;
	}

	/** @param $unlockables \LWS\WOOREWARDS\Abstracts\Unlockable or array of them */
	function &addRef($unlockables)
	{
		if (!\is_array($unlockables))
			$unlockables = array($unlockables);
		foreach($unlockables as $unlockable) {
			$key = $unlockable->getId();
			$ref = array('id' => $unlockable->getId());
			if( \is_a($unlockable, '\LWS\WOOREWARDS\PRO\Unlockables\UserTitle') )
				$ref['title'] = $unlockable->getUserTitle();
			if( \is_a($unlockable, '\LWS\WOOREWARDS\PRO\Unlockables\Role') )
				$ref['role'] = $unlockable->getRoleId();
			if( \is_a($unlockable, '\LWS\WOOREWARDS\PRO\Unlockables\Badge') )
				$ref['badge'] = $unlockable->getBadgeId();

			$this->references[$key] = \apply_filters('lws_woorewards_confiscator_reference_get', $ref, $unlockable, $this);
		}
		return $this;
	}

	/** If confiscation is not the last action in the process,
	 *	usermeta cache should be reset to avoid keeping trace of removed rewards. */
	function &resetCache($yes)
	{
		$this->resetCache = $yes;
	}

	function getRefCount()
	{
		return count($this->references);
	}

	protected function prepare()
	{
		$helpers = array(
			'rewards' => array_filter(array_keys($this->references)),
			'titles'  => implode("','", array_map('\esc_sql', array_column($this->references, 'title', 'title'))),
			'roles'   => array_column($this->references, 'role', 'role'),
			'badges'  => implode("','", array_map('\intval', array_column($this->references, 'badge', 'badge'))),
		);

		$helpers['rewardsIn'] = implode(',', array_map('\intval', $helpers['rewards']));
		if( $helpers['rewardsIn'] )
			$helpers['rewardsIn'] = "({$helpers['rewardsIn']})";

		if( $helpers['titles'] )
			$helpers['titles'] = "('{$helpers['titles']}')";

		if( $helpers['badges'] )
			$helpers['badges'] = "('{$helpers['badges']}')";

		return \apply_filters('lws_woorewards_confiscator_prepare', $helpers, $this);
	}

	function &revoke($reason=false)
	{
		$helpers = $this->prepare();
		@set_time_limit(0); // even if can be ignored by server

		$this->removeBadges($helpers);
		$this->removeTitles($helpers);
		$this->removeCoupons($helpers);
		$this->removeRoles($helpers);
		$this->forgetRedeems($helpers);

		\do_action('lws_woorewards_confiscator_revoke', $this->users, $helpers, $this);
		$this->warnAboutRoles($reason);
		return $this;
	}

	protected function warnAboutRoles($reason=false)
	{
		if( isset($this->usersWithoutRole) && $this->usersWithoutRole )
		{
			\wp_mail(
				\get_option('admin_email'),
				\get_bloginfo('name') . __(": Some users have no role", 'woorewards-pro'),
				implode("\n\n", array(
					sprintf(
						__("This message is generated by MyRewards because some users lost their points and levels due to %s.", 'woorewards-pro'),
						$reason ? $reason : _x("Inactivity", "reward reset reason", 'woorewards-pro')
					),
					__("Revoking level rewards results in removing a role from some users.", 'woorewards-pro'),
					__("You should check that all users have a role again (at least Subscriber [or Customer if WooCommerce is installed]).", 'woorewards-pro'),
				)),
				array('Content-Type: text/plain; charset=UTF-8')
			);
		}
	}

	/** To allow a user passing level again.
	 * @param $helpers (array) contains
	 * * 'origins' entry with a (string) mysql list to use with IN clause */
	function forgetRedeems($helpers)
	{
		if( $helpers['rewardsIn'] )
		{
			global $wpdb;
			$sql = "DELETE FROM {$wpdb->usermeta} WHERE meta_key IN ('lws-loyalty-done-steps', 'lws_wre_unlocked_id') AND meta_value IN {$helpers['rewardsIn']}";
			if( $this->usersIn )
				$sql .= " AND user_id IN {$this->usersIn}";
			$wpdb->query($sql);

			if ($this->resetCache && $this->users) {
				foreach ($this->users as $u)
					\wp_cache_delete($u, 'user_meta');
			}
		}
	}

	/** remove user role
	 * @param $helpers (array) contains
	 * * 'roles' (array) role keys */
	function removeRoles($helpers)
	{
		if( !empty($helpers['roles']) )
		{
			\LWS_WooRewards_Pro::isRoleChangeLocked();
			global $wpdb;
			$capkey = $wpdb->base_prefix . 'capabilities';

			foreach( $helpers['roles'] as $role )
			{
				$escRole = \esc_sql($role);
				$sql = "SELECT user_id, meta_value as `roles` FROM {$wpdb->usermeta} WHERE meta_key='{$capkey}' AND meta_value LIKE '%\"{$escRole}\"%'";
				if( $this->usersIn )
					$sql .= " AND user_id IN {$this->usersIn}";
				$users = $wpdb->get_results($sql, OBJECT_K);

				if( !$users )
					continue;

				$sql = "SELECT user_id, meta_value as `role` FROM {$wpdb->usermeta} WHERE meta_key='lws_woorewards_user_role_backup'";
				$in = implode(',', array_keys($users));
				$sql .= " AND user_id IN ({$in})";
				$backups = $wpdb->get_results($sql, OBJECT_K);

				// we liked to use WP role and user classes, but it may be too heavy, so direct access to DB
				foreach($users as $userId => $user)
				{
					// since we have to unserialize an array, we cannot doing it entirely DB server side.
					$user->roles = unserialize($user->roles);
					if( isset($user->roles[$role]) )
					{
						unset($user->roles[$role]);
						if( isset($backups[$userId]) && $backups[$userId]->role )
						{
							if( !in_array($backups[$userId]->role, $helpers['roles']) )
								$user->roles[$backups[$userId]->role] = true;
							\update_user_meta($userId, 'lws_woorewards_user_role_backup', '');
						}
						if( !$user->roles )
							$this->usersWithoutRole = true;

						\update_user_meta($userId, $capkey, $user->roles);
					}
				}
			}

			\LWS_WooRewards_Pro::isRoleChangeLocked(true);
		}
	}

	/** remove title
	 * @param $helpers (array) contains
	 * * 'titles' entry with a (string) mysql list to use with IN clause */
	function removeTitles($helpers)
	{
		if( !empty($helpers['titles']) )
		{
			global $wpdb;
			$sql = "UPDATE {$wpdb->usermeta} SET meta_value='' WHERE meta_key='woorewards_special_title' AND meta_value IN {$helpers['titles']}";
			if( $this->usersIn )
				$sql .= " AND user_id IN {$this->usersIn}";
			$wpdb->query($sql);
		}
	}

	/** remove badges
	 * @param $helpers (array) contains a 'origins' entry with a (string) mysql list to use with IN clause */
	function removeBadges($helpers)
	{
		if( !empty($helpers['badges']) )
		{
			global $wpdb;
			$sql = "DELETE FROM {$wpdb->lwsWooRewardsBadges} WHERE badge_id IN {$helpers['badges']}";
			if( $this->usersIn )
				$sql .= " AND user_id IN {$this->usersIn}";
			$wpdb->query($sql);
		}
	}

	/** remove coupons (inc. freeproduct, free shipping, variable discount)
	 * @param $helpers (array) contains a 'origins' entry with a (string) mysql list to use with IN clause */
	function removeCoupons($helpers)
	{
		if( !empty($helpers['rewardsIn']) )
		{
			global $wpdb;
			$sql = array(
				'update' => "UPDATE {$wpdb->posts} as p",
				'join'   => "INNER JOIN {$wpdb->postmeta} as o ON p.ID=o.post_id AND o.meta_key='reward_origin_id' AND o.meta_value IN {$helpers['rewardsIn']}",
				'set'    => "SET p.post_status='trash'",
				'where'  => "WHERE p.post_type='shop_coupon'",
			);

			if( $this->usersIn )
			{
				// have to serialise on the fly db server side
				$sub = "SELECT CONCAT('a:1:{i:0;s:', LENGTH(u.user_email), ':\"', u.user_email, '\";}') FROM {$wpdb->users} as u WHERE u.ID IN {$this->usersIn}";
				$sql['join'] .= " INNER JOIN {$wpdb->postmeta} as m ON p.ID=m.post_id AND m.meta_key='customer_email'";
				$sql['where'] .= " AND m.meta_value IN ({$sub})";
			}

			$wpdb->query(implode(' ', $sql));
		}
	}
}
